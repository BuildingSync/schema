/**
 * core/is_filename_with_wildcard.java
 *
 * This file was generated by MapForce 2016r2.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.mapforce.core;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class is_filename_with_wildcard extends com.altova.TraceProvider 
{

	
	static class main implements IEnumerable
	{
		java.lang.String var1_filename;
	
		public main(java.lang.String var1_filename)
		{
			this.var1_filename = var1_filename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.logicalAnd(com.altova.functions.Core.logicalOr(com.altova.functions.Core.contains(closure.var1_filename, "?"), com.altova.functions.Core.contains(closure.var1_filename, "*")), com.altova.functions.Core.logicalOr(com.altova.functions.Core.equal(com.altova.functions.Core.substring(closure.var1_filename, com.altova.CoreTypes.parseDouble("2"), com.altova.CoreTypes.parseDouble("1")), ":"), com.altova.functions.Core.logicalNot(com.altova.functions.Core.contains(closure.var1_filename, ":"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances


	public static IEnumerable create(java.lang.String var1_filename)
	{
		return new main(
			var1_filename
			);

	}
	

	public static boolean eval(java.lang.String var1_filename) throws java.lang.Exception
	{

		com.altova.mapforce.IEnumerator e = create(var1_filename).enumerator();
		if (e.moveNext())
		{
			boolean result = ((Boolean)e.current());
			e.close();
			return result;
		}
		e.close();
		throw new com.altova.AltovaException("Expected a function result.");		
	
	}

}
