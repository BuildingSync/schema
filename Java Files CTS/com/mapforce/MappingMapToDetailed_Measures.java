/**
 * MappingMapToDetailed_Measures.java
 *
 * This file was generated by MapForce 2016r2.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.mapforce;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapToDetailed_Measures extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_CTS_Evaluation_File_Instance;
	
		public main(com.altova.mapforce.IMFNode var1_CTS_Evaluation_File_Instance)
		{
			this.var1_CTS_Evaluation_File_Instance = var1_CTS_Evaluation_File_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			IEnumerator var2_Workbook;
			IEnumerator var3_filter;
			com.altova.mapforce.IEnumerable var4_Row;
			com.altova.mapforce.IEnumerable var5_filter;
			IEnumerator var6_filter;
			java.math.BigInteger var7_cast;
			com.altova.mapforce.IEnumerable var8_filter;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_Workbook = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Workbook", ""), closure.var1_CTS_Evaluation_File_Instance)).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var2_Workbook.moveNext()) {state = 4; return false; }
				var3_filter = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Worksheet", ""), ((com.altova.mapforce.IMFNode)(var2_Workbook.current())))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				if( var2_Workbook != null ) { var2_Workbook.close(); var2_Workbook = null; }
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!var3_filter.moveNext()) {state = 6; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq2_CoreAny((new seq1_map(((com.altova.mapforce.IMFNode)(var3_filter.current()))))))))) {state = 5; return false; }
				var4_Row = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Row", ""), ((com.altova.mapforce.IMFNode)(var3_filter.current()))));
				var5_filter = new com.altova.functions.Core.SequenceCache((new seq3_filter(var4_Row)));
				var6_filter = (var5_filter).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 3;				
				if( var3_filter != null ) { var3_filter.close(); var3_filter = null; }
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 7;				
				if (!var6_filter.moveNext()) {state = 8; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("r", ""), ((com.altova.mapforce.IMFNode)(var6_filter.current())))))) {state = 7; return false; }
				var7_cast = com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("r", ""), ((com.altova.mapforce.IMFNode)(var6_filter.current())))))));
				var8_filter = new com.altova.functions.Core.SequenceCache((new seq5_filter(var4_Row)));
				current = com.altova.functions.Core.resultDocument(com.altova.functions.Core.concat("Detailed", com.altova.CoreTypes.integerToString(var7_cast)), "", (new seq9_join(var7_cast, var8_filter, var5_filter)));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 5;				
				if( var6_filter != null ) { var6_filter.close(); var6_filter = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var6_filter != null ) { var6_filter.close(); var6_filter = null; }
				if( var3_filter != null ) { var3_filter.close(); var3_filter = null; }
				if( var2_Workbook != null ) { var2_Workbook.close(); var2_Workbook = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur_r;
	
		public seq1_map(com.altova.mapforce.IMFNode var1_cur_r)
		{
			this.var1_cur_r = var1_cur_r;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_map closure;
			IEnumerator var2_Name;
			public Enumerator(seq1_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_Name = (com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("Name", ""), closure.var1_cur_r)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_Name.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Xlsx.equalignorecase(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_Name.current()))), "Evaluation Upload Template");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_Name != null ) { var2_Name.close(); var2_Name = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_Name != null ) { var2_Name.close(); var2_Name = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_CoreAny implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_sequence;
	
		public seq2_CoreAny(com.altova.mapforce.IEnumerable var1_sequence)
		{
			this.var1_sequence = var1_sequence;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_CoreAny closure;
			IEnumerator var2_enum;
			public Enumerator(seq2_CoreAny closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_enum = (closure.var1_sequence).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_enum.moveNext()) {state = 3; return false; }
				if (!(((Boolean)(var2_enum.current())))) {state = 2; return false; }
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				if( var2_enum != null ) { var2_enum.close(); var2_enum = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_enum != null ) { var2_enum.close(); var2_enum = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq3_filter(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_filter closure;
			IEnumerator var2_shared;
			public Enumerator(seq3_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_shared = (closure.var1_shared).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_shared.moveNext()) {state = 3; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq2_CoreAny((new seq4_map(((com.altova.mapforce.IMFNode)(var2_shared.current()))))))))) {state = 2; return false; }
				current = var2_shared.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_shared != null ) { var2_shared.close(); var2_shared = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_shared != null ) { var2_shared.close(); var2_shared = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur_Row;
	
		public seq4_map(com.altova.mapforce.IMFNode var1_cur_Row)
		{
			this.var1_cur_Row = var1_cur_Row;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_map closure;
			IEnumerator var2_r;
			public Enumerator(seq4_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_r = (com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("r", ""), closure.var1_cur_Row)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_r.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.equalOrGreater(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_r.current())))))))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(4L)));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_r != null ) { var2_r.close(); var2_r = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_r != null ) { var2_r.close(); var2_r = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq5_filter(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_filter closure;
			IEnumerator var2_filter;
			public Enumerator(seq5_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = ((new seq6_filter(closure.var1_shared))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq2_CoreAny((new seq8_map(((com.altova.mapforce.IMFNode)(var2_filter.current()))))))))) {state = 2; return false; }
				current = var2_filter.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter != null ) { var2_filter.close(); var2_filter = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter != null ) { var2_filter.close(); var2_filter = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_filter implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq6_filter(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_filter closure;
			IEnumerator var2_shared;
			public Enumerator(seq6_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_shared = (closure.var1_shared).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_shared.moveNext()) {state = 3; return false; }
				if (!((Boolean)com.altova.functions.Core.first((new seq2_CoreAny((new seq7_map(((com.altova.mapforce.IMFNode)(var2_shared.current()))))))))) {state = 2; return false; }
				current = var2_shared.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_shared != null ) { var2_shared.close(); var2_shared = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_shared != null ) { var2_shared.close(); var2_shared = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur_Row;
	
		public seq7_map(com.altova.mapforce.IMFNode var1_cur_Row)
		{
			this.var1_cur_Row = var1_cur_Row;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_map closure;
			IEnumerator var2_r;
			public Enumerator(seq7_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_r = (com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("r", ""), closure.var1_cur_Row)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_r.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.equalOrGreater(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_r.current())))))))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(2L)));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_r != null ) { var2_r.close(); var2_r = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_r != null ) { var2_r.close(); var2_r = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur_Row;
	
		public seq8_map(com.altova.mapforce.IMFNode var1_cur_Row)
		{
			this.var1_cur_Row = var1_cur_Row;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_map closure;
			IEnumerator var2_r;
			public Enumerator(seq8_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_r = (com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("r", ""), closure.var1_cur_Row)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_r.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.equalOrLess(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_r.current())))))))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(2L)));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_r != null ) { var2_r.close(); var2_r = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_r != null ) { var2_r.close(); var2_r = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_join implements IEnumerable
	{
		java.math.BigInteger var1_shared;
		com.altova.mapforce.IEnumerable var2_shared;
		com.altova.mapforce.IEnumerable var3_shared;
	
		public seq9_join(java.math.BigInteger var1_shared, com.altova.mapforce.IEnumerable var2_shared, com.altova.mapforce.IEnumerable var3_shared)
		{
			this.var1_shared = var1_shared;
			this.var2_shared = var2_shared;
			this.var3_shared = var3_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_join closure;
			IEnumerator var4_shared;
			IEnumerator var5_Cell;
			java.math.BigInteger var6_cast;
			IEnumerator var7_filter;
			java.math.BigDecimal var8_cast;
			public Enumerator(seq9_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var4_shared = (closure.var2_shared).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var4_shared.moveNext()) {state = 3; return false; }
				var5_Cell = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", ""), ((com.altova.mapforce.IMFNode)(var4_shared.current())))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var4_shared != null ) { var4_shared.close(); var4_shared = null; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var5_Cell.moveNext()) {state = 5; return false; }
				var6_cast = com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("n", ""), ((com.altova.mapforce.IMFNode)(var5_Cell.current())))))));
				var7_filter = (com.altova.functions.Core.itemAt((new seq10_join(closure.var2_shared)), var6_cast)).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				if( var5_Cell != null ) { var5_Cell.close(); var5_Cell = null; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var7_filter.moveNext()) {state = 7; return false; }
				var8_cast = com.altova.CoreTypes.integerToDecimal(var6_cast);
				if (!(com.altova.functions.Core.logicalAnd(com.altova.functions.Core.equalOrGreater(var8_cast, new java.math.BigDecimal("41")), com.altova.functions.Core.equalOrLess(var8_cast, new java.math.BigDecimal("164"))))) {state = 6; return false; }
				current = com.altova.functions.Core.createElement("Rows", (new seq11_join(((com.altova.mapforce.IMFNode)(var7_filter.current())), closure.var1_shared, closure.var3_shared)));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				if( var7_filter != null ) { var7_filter.close(); var7_filter = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var7_filter != null ) { var7_filter.close(); var7_filter = null; }
				if( var5_Cell != null ) { var5_Cell.close(); var5_Cell = null; }
				if( var4_shared != null ) { var4_shared.close(); var4_shared = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_shared;
	
		public seq10_join(com.altova.mapforce.IEnumerable var1_shared)
		{
			this.var1_shared = var1_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10_join closure;
			IEnumerator var2_shared;
			IEnumerator var3_Cell;
			public Enumerator(seq10_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_shared = (closure.var1_shared).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_shared.moveNext()) {state = 3; return false; }
				var3_Cell = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", ""), ((com.altova.mapforce.IMFNode)(var2_shared.current())))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_shared != null ) { var2_shared.close(); var2_shared = null; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 4;				
				if (!var3_Cell.moveNext()) {state = 5; return false; }
				current = var3_Cell.current();
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				if( var3_Cell != null ) { var3_Cell.close(); var3_Cell = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var3_Cell != null ) { var3_Cell.close(); var3_Cell = null; }
				if( var2_shared != null ) { var2_shared.close(); var2_shared = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
		java.math.BigInteger var2_shared;
		com.altova.mapforce.IEnumerable var3_shared;
	
		public seq11_join(com.altova.mapforce.IMFNode var1_current, java.math.BigInteger var2_shared, com.altova.mapforce.IEnumerable var3_shared)
		{
			this.var1_current = var1_current;
			this.var2_shared = var2_shared;
			this.var3_shared = var3_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_join closure;
			IEnumerator var4_shared;
			IEnumerator var5_filter;
			com.altova.mapforce.IEnumerable var6_c;
			public Enumerator(seq11_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("Label", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(closure.var1_current)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var4_shared = (closure.var3_shared).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var4_shared.moveNext()) {state = 4; return false; }
				var5_filter = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Cell", ""), ((com.altova.mapforce.IMFNode)(var4_shared.current())))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				if( var4_shared != null ) { var4_shared.close(); var4_shared = null; }
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var5_filter.moveNext()) {state = 6; return false; }
				var6_c = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("c", ""), closure.var1_current));
				if (!((Boolean)com.altova.functions.Core.first((new seq2_CoreAny((new seq12_cond_c(((com.altova.mapforce.IMFNode)(var4_shared.current())), closure.var2_shared, ((com.altova.mapforce.IMFNode)(var5_filter.current())), var6_c))))))) {state = 5; return false; }
				current = com.altova.functions.Core.createElement("Number of Measures", com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.parseInteger(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var5_filter.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 3;				
				if( var5_filter != null ) { var5_filter.close(); var5_filter = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var5_filter != null ) { var5_filter.close(); var5_filter = null; }
				if( var4_shared != null ) { var4_shared.close(); var4_shared = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_cond_c implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
		java.math.BigInteger var2_shared;
		com.altova.mapforce.IMFNode var3_current;
		com.altova.mapforce.IEnumerable var4_shared;
	
		public seq12_cond_c(com.altova.mapforce.IMFNode var1_current, java.math.BigInteger var2_shared, com.altova.mapforce.IMFNode var3_current, com.altova.mapforce.IEnumerable var4_shared)
		{
			this.var1_current = var1_current;
			this.var2_shared = var2_shared;
			this.var3_current = var3_current;
			this.var4_shared = var4_shared;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_cond_c closure;
			com.altova.mapforce.IEnumerable var5_c;
			com.altova.mapforce.IEnumerable var6_r;
			public Enumerator(seq12_cond_c closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var4_shared))) {state = 0; return false; }
				var5_c = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("c", ""), closure.var3_current));
				if (!(com.altova.functions.Core.exists(var5_c))) {state = 0; return false; }
				var6_r = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterAttributes(com.altova.functions.Core.createQName("r", ""), closure.var1_current));
				if (!(com.altova.functions.Core.exists(var6_r))) {state = 0; return false; }
				current = com.altova.functions.Core.logicalAnd(com.altova.functions.Core.equal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var4_shared)), com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var5_c))), com.altova.functions.Core.equal(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(var6_r))))), com.altova.CoreTypes.integerToDecimal(closure.var2_shared)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_CTS_Evaluation_File_Instance;
	
		public Outer(com.altova.mapforce.IMFNode var1_CTS_Evaluation_File_Instance)
		{
			this.var1_CTS_Evaluation_File_Instance = var1_CTS_Evaluation_File_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_join;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_join = ((new main(closure.var1_CTS_Evaluation_File_Instance))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_join.moveNext()) {state = 3; return false; }
				current = var2_join.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_join != null ) { var2_join.close(); var2_join = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_join != null ) { var2_join.close(); var2_join = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected org.w3c.dom.Node varCTS_Evaluation_FileInstance;

	public void run(String CTS_Evaluation_FileSourceFilename) throws Exception {
		// open source streams
		writeTrace("Loading " + CTS_Evaluation_FileSourceFilename + "...\n");
		com.altova.io.FileInput CTS_Evaluation_FileSource = new com.altova.io.FileInput(CTS_Evaluation_FileSourceFilename);

		// run
	
		run(CTS_Evaluation_FileSource);

		// close source streams
		CTS_Evaluation_FileSource.close();
	}


	// main entry point

	public void run(com.altova.io.Input CTS_Evaluation_FileSource) throws Exception {
		// Open the source(s)
		com.altova.xml.XLSXFileReader xlsxReader_CTS_Evaluation_File = new com.altova.xml.XLSXFileReader(CTS_Evaluation_FileSource);
		org.w3c.dom.Document doc_CTS_Evaluation_File = xlsxReader_CTS_Evaluation_File.run();
		varCTS_Evaluation_FileInstance = doc_CTS_Evaluation_File;
		if (runDoesCloseAll)
			CTS_Evaluation_FileSource.close();

		// Create the target

		// Execute mapping

		main mapping = new main(new com.altova.xml.DOMDocumentAsMFNodeAdapter(varCTS_Evaluation_FileInstance, CTS_Evaluation_FileSource.getFilename()));

		for (IEnumerator en = mapping.enumerator(); en.moveNext();)
		{
		  MFDocument doc = (MFDocument) en.current();
		com.mapforce.Text_file2.Text_file2Document Detailed_MeasuresTargetDoc = new com.mapforce.Text_file2.Text_file2Document(com.mapforce.Text_file2.Text_file2_TypeInfo.binder.getTypes()[com.mapforce.Text_file2.Text_file2_TypeInfo._altova_ti_altova_RowsType],0);
		com.altova.text.tablelike.Table Detailed_MeasuresTargetObject = Detailed_MeasuresTargetDoc;
			Detailed_MeasuresTargetDoc.getFormat().setAssumeFirstRowAsHeaders( false );
			Detailed_MeasuresTargetDoc.getFormat().setFieldDelimiter( ',' );
			Detailed_MeasuresTargetDoc.getFormat().setRemoveEmpty( true );
			Detailed_MeasuresTargetDoc.getFormat().setQuoteCharacter( '\"' );
		  com.altova.io.Output Detailed_MeasuresTarget = new com.altova.io.FileOutput(doc.getFilename());
		  com.altova.text.MFTextWriter.write(doc.select(IMFNode.MFQueryKind_All, null), Detailed_MeasuresTargetObject);
		Detailed_MeasuresTargetDoc.setEncoding( "UTF-8", false, false );
		Detailed_MeasuresTargetDoc.save(Detailed_MeasuresTarget);
		  Detailed_MeasuresTarget.close();
		}

	}



}
